Join graph segments (f indicates final):
seg[0]: [0]
seg[1]: name[0] (f)
seg[2]: event[0] (f)
seg[3]: gender[0]
seg[4]: nation_code[0]
seg[5]: [1]
seg[6]: f_name[1] (f)
seg[7]: s_name[1]
seg[8]: [2]
seg[9]: name[2] (f)
seg[10]: code[2]
Join graph nodes:
node[0]: athlete A(6677/264)
node[1]: code B(6/1)
node[2]: nation C(215/6)
Join graph equivalence classes:
eqclass[0]: gender[0] s_name[1]
eqclass[1]: nation_code[0] code[2]
Join graph edges:
term[0]: C.code=A.nation_code (sel 0.00465116) (join term) (mergeable) (inner-join) (indexable code[2]) (loc 0)
term[1]: A.gender=B.s_name (sel 0.001) (join term) (mergeable) (inner-join) (loc 0)
Join graph terms:
term[2]: rownum range (min inf_lt 10) (sel 0.1) (rank 3) (instnum term) (not-join eligible) (loc 0)

Query plan:

idx-join (inner join)
    outer: nl-join (inner join)
               edge:  term[1]
               outer: sscan
                          class: B node[1]
                          sargs: term[2]
                          cost:  fixed 0(0.0/0.0) var 1(0.0/1.0) card 6
               inner: sscan
                          class: A node[0]
                          sargs: term[1]
                          cost:  fixed 0(0.0/0.0) var 281(16.7/264.0) card 6677
               sargs: term[2]
               cost:  fixed 0(0.0/0.0) var 365(100.2/265.0) card 40
    inner: iscan
               class: C node[2]
               index: pk_nation_code term[0]
               cost:  fixed 2(0.0/2.0) var 1(0.0/1.0) card 215
    sargs: term[2]
    cost:  fixed 2(0.0/2.0) var 375(100.3/275.0) card 40

Query stmt:

select A."name", B.f_name, C."name", A."event" from athlete A, code B, nation C where A.gender=B.s_name and C.code=A.nation_code and (rownum< ?:0 )
