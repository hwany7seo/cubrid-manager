<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<project default="ci" name="CubridManager">
	<property name="product.name" value="CUBRIDManager" />
	<property name="javac.encoding" value="UTF-8" />
	<property name="debug" value="" />

	<property name="jdbc.file" value="./driver/JDBC-8.3.1.0173-cubrid.jar" />
	<property name="jdbc.proxy" value="./test/com.cubrid.cubridmanager.jdbc.proxy_8.4.1.201209090110.jar" />
	<property name="build.dir" value="${basedir}" />

	<property name="parent.home" value=".." />
	<property name="debug" value="false" />

	<!--quality check -->
	<property name="test.home" value="${basedir}/test" />
	<property name="reports.home" value="${build.dir}/reports" />
	<!-- bulid temp dir -->
	<property name="deploy.home" value="${build.dir}/deploy" />
	<property name="doc.home" value="${deploy.home}/doc" />
	<property name="classes.home" value="${build.dir}/classes" />
	<property name="rcp.lib" value="${basedir}/test/lib" />
	<!-- findbugs-->
	<property name="findbugs.home" value="${test.home}/findbugs" />
	<property name="findbugs.lib" value="${findbugs.home}/lib" />
	<property name="findbugs.xsl" value="${findbugs.home}/xsl/fancy-hist.xsl" />
	<property name="reports.findbugs.home" value="${reports.home}/findbugs" />
	<!-- pmd -->
	<property name="pmd.home" value="${test.home}/pmd" />
	<property name="pmd.lib" value="${pmd.home}/lib" />
	<property name="pmd.rulesets" value="${pmd.home}/rulesets" />
	<property name="reports.pmd.home" value="${reports.home}/pmd" />
	<!-- checkstyle -->
	<property name="checkstyle.home" value="${test.home}/checkstyle" />
	<property name="checkstyle.lib" value="${checkstyle.home}/lib" />
	<property name="reports.checkstyle.home" value="${reports.home}/checkstyle" />
	<!-- cobertura -->
	<property name="cobertura.home" value="${test.home}/cobertura" />
	<property name="cobertura.lib" value="${cobertura.home}/lib" />
	<property name="reports.cobertura.home" value="${reports.home}/cobertura" />
	<property name="reports.junit.xml.dir" value="${reports.cobertura.home}/junit-xml" />
	<property name="reports.junit.html.dir" value="${reports.cobertura.home}/junit-html" />
	<property name="reports.cobertura.xml.dir" value="${reports.cobertura.home}/cobertura-xml" />
	<property name="reports.cobertura.html.dir" value="${reports.cobertura.home}/cobertura-html" />
	<property name="cobertura.datafile" value="${reports.cobertura.home}/cobertura.ser" />
	<property name="cobertura.instrumented.dir" value="${reports.cobertura.home}/instrumented" />
	<property name="cobertura.core.classes.dir" value="${cobertura.instrumented.dir}/classes/core" />
	<property name="cobertura.test.core.classes.dir" value="${cobertura.instrumented.dir}/classes/test-core" />
	<property name="cobertura.core.instrumented-classes.dir" value="${cobertura.instrumented.dir}/instrumented-classes/core" />

	<!--
  	jdbc proxy project property
    -->
	<property name="jdbc.proxy.project" value="com.cubrid.cubridmanager.jdbc.proxy" />
	<property name="jdbc.proxy.src.home" value="${parent.home}/${jdbc.proxy.project}/src" />
	<!--
  	manager.core project property
    -->
	<property name="core.project" value="com.cubrid.cubridmanager.core" />
	<property name="core.src.home" value="${parent.home}/${core.project}/src" />
	<property name="core.lib.home" value="${parent.home}/${core.project}/lib" />
	<property name="core.classes.home" value="${classes.home}/core" />
	<!--
  	common.core project property
    -->
	<property name="common.core.project" value="com.cubrid.common.core" />
	<property name="common.core.src.home" value="${parent.home}/${common.core.project}/src" />
	<property name="common.core.lib.home" value="${parent.home}/${common.core.project}/lib" />
	<property name="common.core.classes.home" value="${classes.home}/common.core" />
	<!--
  	common update project property
    -->
	<property name="common.update.project" value="com.cubrid.common.update" />
	<property name="common.update.src.home" value="${parent.home}/${common.update.project}/src" />
	<property name="common.update.lib.home" value="${parent.home}/${common.update.project}/lib" />
	<property name="common.update.classes.home" value="${classes.home}/update" />
	<!--
  	common ui project property
    -->
	<property name="common.ui.project" value="com.cubrid.common.ui" />
	<property name="common.ui.src.home" value="${parent.home}/${common.ui.project}/src" />
	<property name="common.ui.lib.home" value="${parent.home}/${common.ui.project}/lib" />
	<property name="common.ui.classes.home" value="${classes.home}/common" />
	<!--
  	common.configuration.project
    -->
	<property name="common.configuration.project" value="com.cubrid.common.configuration" />
	<property name="common.configuration.src.home" value="${parent.home}/${common.configuration.project}/src" />
	<property name="common.configuration.lib.home" value="${parent.home}/${common.configuration.project}/lib" />
	<property name="common.configuration.classes.home" value="${classes.home}/configuration" />

	<!--
  	CUBRID editor project property
    -->
	<property name="editor.project" value="com.cubrid.tool.editor" />
	<property name="editor.src.home" value="${parent.home}/${editor.project}/src" />
	<property name="editor.lib.home" value="${parent.home}/${editor.project}/lib" />
	<property name="editor.classes.home" value="${classes.home}/editor" />

	<!--
  	manager ui project property
    -->
	<property name="ui.project" value="com.cubrid.cubridmanager.ui" />
	<property name="ui.src.home" value="${parent.home}/${ui.project}/src" />
	<property name="ui.lib.home" value="${parent.home}/${ui.project}/lib" />
	<property name="ui.classes.home" value="${classes.home}/ui" />
	<!--
  	app project property
    -->
	<property name="app.project" value="com.cubrid.cubridmanager.app" />
	<property name="app.src.home" value="${parent.home}/${app.project}/src" />
	<property name="app.classes.home" value="${classes.home}/app" />
	<!--
  	plugin project property
    -->
	<property name="plugin.project" value="com.cubrid.cubridmanager.plugin" />
	<property name="plugin.src.home" value="${parent.home}/${plugin.project}/src" />
	<property name="plugin.classes.home" value="${classes.home}/plugin" />
	<!--
  	com.cubrid.cubridmanager.core test project property
    -->
	<property name="test.core.project" value="com.cubrid.cubridmanager.core.testfragment" />
	<property name="test.core.src.home" value="${parent.home}/${test.core.project}/src" />
	<!--
  	com.cubrid.common.core test project property
    -->
	<property name="test.common.core.project" value="com.cubrid.common.core.testfragment" />
	<property name="test.common.core.src.home" value="${parent.home}/${test.common.core.project}/src" />
	<!--
    Prepare the environment
    -->
	<target name="prepare">
		<mkdir dir="${deploy.home}" />
		<mkdir dir="${classes.home}" />
		<mkdir dir="${reports.home}" />

		<mkdir dir="${core.classes.home}" />
		<mkdir dir="${common.core.classes.home}" />
		<mkdir dir="${common.update.classes.home}" />
		<mkdir dir="${common.ui.classes.home}" />
		<mkdir dir="${common.configuration.classes.home}" />
		<mkdir dir="${ui.classes.home}" />
		<mkdir dir="${app.classes.home}" />
		<mkdir dir="${plugin.classes.home}" />
		<mkdir dir="${editor.classes.home}" />

		<mkdir dir="${reports.findbugs.home}" />
		<mkdir dir="${reports.pmd.home}" />
		<mkdir dir="${reports.checkstyle.home}" />
		<mkdir dir="${reports.cobertura.home}" />
		<mkdir dir="${cobertura.instrumented.dir}" />
		<mkdir dir="${reports.junit.xml.dir}" />
		<mkdir dir="${reports.junit.html.dir}" />
		<mkdir dir="${reports.cobertura.xml.dir}" />
		<mkdir dir="${reports.cobertura.html.dir}" />
		<mkdir dir="${cobertura.core.classes.dir}" />
		<mkdir dir="${cobertura.test.core.classes.dir}" />
		<mkdir dir="${cobertura.core.instrumented-classes.dir}" />
	</target>
	<!--
    Clean the last compiled files
    -->
	<target name="clean">
		<delete dir="${deploy.home}" />
		<delete dir="${classes.home}" />
		<delete dir="${reports.home}" />
		<delete>
			<fileset dir="${basedir}" includes="junit*" />
		</delete>
	</target>
	<!--
    check style classpath
    -->
	<path id="checkstyle.classpath">
		<fileset dir="${checkstyle.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!--
    pmd classpath
    -->
	<path id="pmd.classpath">
		<fileset dir="${pmd.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!--
    cobertura classpath
    -->
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<!--
    the classpath that common.core project compile need
    -->
	<path id="common.core.compile.classpath">
		<fileset file="${rcp.lib}/slf4j-api-1.7.6.jar" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset file="${jdbc.proxy}" />
		<fileset file="${common.core.src.home}/log4j.properties" />
		<pathelement location="${common.core.classes.home}" />
	</path>
	<!--
    the classpath that core project compile need
    -->
	<path id="core.compile.classpath">
		<pathelement location="${core.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset file="${jdbc.proxy}" />
		<pathelement location="${common.core.classes.home}" />
	</path>
	
	<!--
     the classpath that common update project compile need
    -->
	<path id="common.update.compile.classpath">
		<pathelement location="${common.update.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${common.update.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${common.core.classes.home}" />
	</path>
	
	<!--
    the classpath that core project cobertura compile need
    -->
	<path id="core.cobertura.compile.classpath">
		<pathelement location="${cobertura.core.classes.dir}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset file="${jdbc.proxy}" />
		<pathelement location="${common.core.classes.home}" />
		<pathelement location="${test.common.core.classes.home}" />
	</path>
	<!--
    the classpath that editor project compile need
    -->
	<path id="editor.compile.classpath">
		<pathelement location="${editor.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${editor.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${common.core.classes.home}" />
	</path>

	<!--
     the classpath that common configuration project compile need
    -->
	<path id="common.configuration.compile.classpath">
		<pathelement location="${common.configuration.classes.home}" />
		<fileset dir="${common.configuration.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!--
     the classpath that common ui project compile need
    -->
	<path id="common.ui.compile.classpath">
		<pathelement location="${common.ui.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${common.ui.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${common.update.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset file="${jdbc.proxy}" />
		<pathelement location="${core.classes.home}" />
		<pathelement location="${common.core.classes.home}" />
		<pathelement location="${editor.classes.home}" />
		<pathelement location="${common.configuration.classes.home}" />
		<pathelement location="${common.update.classes.home}" />
	</path>
	<!--
    the classpath that ui project compile need
    -->
	<path id="ui.compile.classpath">
		<pathelement location="${ui.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${common.ui.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${ui.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset file="${jdbc.proxy}" />
		<pathelement location="${core.classes.home}" />
		<pathelement location="${common.ui.classes.home}" />
		<pathelement location="${common.core.classes.home}" />
		<pathelement location="${common.update.classes.home}" />
		<pathelement location="${editor.classes.home}" />
		<pathelement location="${common.configuration.classes.home}" />
	</path>

	<!--
    the classpath that plugin project compile need
    -->
	<path id="plugin.compile.classpath">
		<pathelement location="${plugin.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.classes.home}" />
		<pathelement location="${common.ui.classes.home}" />
		<pathelement location="${common.core.classes.home}" />
		<pathelement location="${ui.classes.home}" />
		<pathelement location="${common.configuration.classes.home}" />
	</path>
	<!--
    the classpath that app project compile need
    -->
	<path id="app.compile.classpath">
		<pathelement location="${app.classes.home}" />
		<fileset dir="${common.core.lib.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${rcp.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.classes.home}" />
		<pathelement location="${common.ui.classes.home}" />
		<pathelement location="${common.core.classes.home}" />
		<pathelement location="${common.update.classes.home}" />
		<pathelement location="${ui.classes.home}" />
		<pathelement location="${common.configuration.classes.home}" />
	</path>
	<!--
    compile CUBRID Manager related project
    -->
	<target name="compile" depends="prepare">
		<javac srcdir="${common.configuration.src.home}" destdir="${common.configuration.classes.home}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="common.configuration.compile.classpath" />
		</javac>
		<javac srcdir="${common.core.src.home}" destdir="${common.core.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="common.core.compile.classpath" />
		</javac>
		<javac srcdir="${core.src.home}" destdir="${core.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="core.compile.classpath" />
		</javac>
		<javac srcdir="${common.update.src.home}" destdir="${common.update.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="common.update.compile.classpath" />
		</javac>
		<javac srcdir="${editor.src.home}" destdir="${editor.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="editor.compile.classpath" />
		</javac>

		<javac srcdir="${common.ui.src.home}" destdir="${common.ui.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="common.ui.compile.classpath" />
		</javac>
		<javac srcdir="${ui.src.home}" destdir="${ui.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="ui.compile.classpath" />
		</javac>
		<javac srcdir="${app.src.home}" destdir="${app.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="app.compile.classpath" />
		</javac>
		<javac srcdir="${plugin.src.home}" destdir="${plugin.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="plugin.compile.classpath" />
		</javac>
	</target>

	<target name="compile-klocwork" depends="prepare">
		<javac srcdir="${ui.src.home}" destdir="${ui.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="ui.compile.classpath" />
		</javac>
		<javac srcdir="${app.src.home}" destdir="${app.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="app.compile.classpath" />
		</javac>
		<javac srcdir="${plugin.src.home}" destdir="${plugin.classes.home}" encoding="${javac.encoding}" source="1.6" target="1.6" debug="${debug}" debuglevel="lines,source">
			<classpath refid="plugin.compile.classpath" />
		</javac>
	</target>

	<!--
     Produce javadoc
    -->
	<target name="javadoc" depends="prepare">
		<javadoc destdir="${doc.home}" encoding="utf-8" charset="utf-8" windowtitle="${product.name}" source="1.6" access="package" author="true" version="true">
			<packageset dir="${core.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${common.update.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${common.ui.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${common.configuration.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${ui.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${editor.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${app.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${plugin.src.home}">
				<include name="**" />
			</packageset>
			<packageset dir="${jdbc.proxy.src.home}">
				<include name="**" />
			</packageset>
		</javadoc>
	</target>

	<!--
	find bugs
	-->
	<target name="findbugs">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.lib}/findbugs-ant.jar" />
		<delete>
			<fileset dir="${core.classes.home}" includes="**/GetPartitionedClassListTask.class" />
		</delete>
		<findbugs home="${findbugs.home}" output="xml" outputFile="${reports.findbugs.home}/findbugs_result.xml" jvmargs="-Dfindbugs.noSummary=true -Xmx512m">
			<auxClasspath>
				<fileset dir="${rcp.lib}" includes="**/*.jar" />
				<fileset file="${cobertura.lib}/junit-4.8.jar" />
			</auxClasspath>
			<sourcePath path="${common.update.src.home}" />
			<class location="${common.update.classes.home}" />
			<sourcePath path="${common.ui.src.home}" />
			<class location="${common.ui.classes.home}" />
			<sourcePath path="${common.configuration.src.home}" />
			<class location="${common.configuration.classes.home}" />
			<sourcePath path="${ui.src.home}" />
			<class location="${ui.classes.home}/" />
			<sourcePath path="${editor.src.home}" />
			<class location="${editor.classes.home}/" />
			<sourcePath path="${core.src.home}" />
			<class location="${core.classes.home}/" />
			<sourcePath path="${plugin.src.home}" />
			<class location="${plugin.classes.home}/" />
			<sourcePath path="${app.src.home}" />
			<class location="${app.classes.home}/" />
			<sourcePath path="${jdbc.proxy.src.home}" />
			<class location="${jdbc.proxy}/" />
		</findbugs>
		<xslt in="${reports.findbugs.home}/findbugs_result.xml" out="${reports.findbugs.home}/findbugs_report.html" style="${findbugs.xsl}" />
	</target>

	<!--
	pmd
	-->
	<target name="pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpath="${pmd.lib}/pmd-4.2.5.jar">
			<classpath refid="pmd.classpath" />
		</taskdef>
		<pmd rulesetfiles="${pmd.rulesets}/basic.xml,${pmd.rulesets}/design.xml,${pmd.rulesets}/imports.xml,${pmd.rulesets}/unusedcode.xml">
			<formatter type="xml" toFile="${reports.pmd.home}/pmd_result.xml" />
			<formatter type="html" toFile="${reports.pmd.home}/pmd_report.html" />
			<fileset dir="${core.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${common.core.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${common.update.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${common.ui.src.home}">
				<include name="**/*.java" />
				<exclude name="**/CUBRIDSQLParser.java" />
				<exclude name="**/CUBRIDSQLLexer.java" />
				<exclude name="**/UpperLexer.java" />
				<exclude name="**/UpperParser.java" />
			</fileset>
			<fileset dir="${common.configuration.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${ui.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${editor.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${plugin.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${app.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${jdbc.proxy.src.home}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>

	<!--
	check style
	-->
	<target name="checkstyle">
		<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
			<classpath refid="checkstyle.classpath" />
		</taskdef>
		<checkstyle config="${checkstyle.home}/ruledocs/checkstyle-0.6.xml" maxErrors="100000" failureProperty="${reports.checkstyle.home}/checkstyle.failure">
			<fileset dir="${core.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${common.update.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${common.ui.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${common.configuration.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${ui.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${editor.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${plugin.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${app.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${jdbc.proxy.src.home}" includes="**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<formatter type="xml" toFile="${reports.checkstyle.home}/checkstyle_result.xml" />
			<property key="checkstyle.cache.file" file="${reports.checkstyle.home}/cachefile" />
			<property key="checkstyle.header.file" file="${checkstyle.home}/ruledocs/java.header" />
			<property key="checkstyle.suppressions.file" file="${checkstyle.home}/ruledocs/checkstyle-suppressions.xml" />
		</checkstyle>
		<xslt in="${reports.checkstyle.home}/checkstyle_result.xml" out="${reports.checkstyle.home}/checkstyle_report.html" style="${checkstyle.home}/ruledocs/checkstyle-noframes-sorted.xsl" />
	</target>

	<!--
	cobertura
	-->
	<target name="cobertura-compile">
		<javac srcdir="${common.core.src.home}" destdir="${cobertura.core.classes.dir}" debug="yes" encoding="${javac.encoding}" source="1.6">
			<classpath refid="core.cobertura.compile.classpath" />
		</javac>
		<javac srcdir="${core.src.home}" destdir="${cobertura.core.classes.dir}" debug="yes" encoding="${javac.encoding}" source="1.6">
			<classpath refid="core.cobertura.compile.classpath" />
		</javac>
		<javac srcdir="${test.core.src.home}" destdir="${cobertura.test.core.classes.dir}" debug="yes" encoding="${javac.encoding}" source="1.6">
			<classpath refid="cobertura.classpath" />
			<classpath refid="core.cobertura.compile.classpath" />
		</javac>
		<javac srcdir="${test.common.core.src.home}" destdir="${cobertura.test.core.classes.dir}" debug="yes" encoding="${javac.encoding}" source="1.6">
			<classpath refid="cobertura.classpath" />
			<classpath refid="core.cobertura.compile.classpath" />
		</javac>
		<copy todir="${cobertura.core.classes.dir}">
			<fileset dir="${parent.home}/${core.project}">
				<include name="*.xml" />
				<include name="*.properties" />
			</fileset>
		</copy>
		<copy todir="${cobertura.core.classes.dir}">
			<fileset dir="${core.src.home}">
				<include name="**/*.properties" />
			</fileset>
		</copy>
		<copy todir="${cobertura.test.core.classes.dir}">
			<fileset dir="${parent.home}/${test.core.project}">
				<include name="*.xml" />
				<include name="*.properties" />
			</fileset>
		</copy>
		<copy todir="${cobertura.test.core.classes.dir}">
			<fileset dir="${test.core.src.home}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${cobertura.test.core.classes.dir}">
			<fileset dir="${test.common.core.src.home}">
				<exclude name="**/*.java" />
				<exclude name="**/sysParam.properties" />
			</fileset>
		</copy>
		<copy todir="${cobertura.test.core.classes.dir}/lib">
			<fileset file="${jdbc.file}" />
		</copy>
	</target>

	<target name="cobertura" depends="cobertura-compile">
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
		<delete file="${cobertura.datafile}" />
		<cobertura-instrument todir="${cobertura.core.instrumented-classes.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${cobertura.core.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>

		<junit fork="yes" forkmode="once" dir="${reports.cobertura.home}" failureProperty="${reports.cobertura.home}/junit.failed">
			<!--
			Specify the name of the coverage data file to use.
			The value specified below is the default.
		    -->
			<jvmarg value="-XX:-UseSplitVerifier" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />

			<!--
			Note the classpath order: instrumented classes are before the
			original (uninstrumented) classes.  This is important.
		    -->
			<classpath location="${cobertura.core.instrumented-classes.dir}" />
			<classpath location="${cobertura.core.classes.dir}" />
			<classpath refid="core.compile.classpath" />
			<classpath refid="common.core.compile.classpath" />
			<classpath location="${cobertura.test.core.classes.dir}" />
			<!--
			The instrumented classes reference classes used by the
			Cobertura runtime, so Cobertura and its dependencies
			must be on your classpath.
		    -->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<formatter type="brief" usefile="false" />
			<test name="${testcase}" todir="${reports.junit.xml.dir}" if="testcase" />
			<batchtest todir="${reports.junit.xml.dir}" unless="testcase">
				<fileset dir="${test.core.src.home}">
					<include name="**/*Test.java" />
				</fileset>
				<fileset dir="${test.common.core.src.home}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${reports.junit.xml.dir}">
			<fileset dir="${reports.junit.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.junit.html.dir}" />
		</junitreport>

		<cobertura-report format="xml" destdir="${reports.cobertura.xml.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${test.core.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.common.core.src.home}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>

		<cobertura-report format="html" destdir="${reports.cobertura.html.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${test.core.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.common.core.src.home}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>

	<target depends="clean,compile,checkstyle,cobertura" name="ci" />
</project>
