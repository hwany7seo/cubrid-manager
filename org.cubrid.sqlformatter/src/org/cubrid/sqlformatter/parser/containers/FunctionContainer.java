package org.cubrid.sqlformatter.parser.containers;

import java.util.Set;
import java.util.TreeSet;
import org.apache.commons.lang.StringUtils;

public class FunctionContainer {
  private Set<String> containers = new TreeSet<String>();
  
  public static FunctionContainer INSTANCE = new FunctionContainer();
  
  private FunctionContainer() {
    this.containers.add("SUBSTR");
    this.containers.add("POSITION");
    this.containers.add("ASCII");
    this.containers.add("BIN");
    this.containers.add("BIT_LENGTH");
    this.containers.add("CHAR_LENGTH");
    this.containers.add("CHARACTER_LENGTH");
    this.containers.add("LENGTHB");
    this.containers.add("LENGTH");
    this.containers.add("CHR");
    this.containers.add("CONCAT");
    this.containers.add("CONCAT_WS");
    this.containers.add("ELT");
    this.containers.add("FIELD");
    this.containers.add("FIND_IN_SET");
    this.containers.add("INSTR");
    this.containers.add("LCASE");
    this.containers.add("LOWER");
    this.containers.add("LEFT");
    this.containers.add("LOCATE");
    this.containers.add("LPAD");
    this.containers.add("LTRIM");
    this.containers.add("MID");
    this.containers.add("OCTET_LENGTH");
    this.containers.add("REPEAT");
    this.containers.add("REPLACE");
    this.containers.add("REVERSE");
    this.containers.add("RIGHT");
    this.containers.add("RPAD");
    this.containers.add("RTRIM");
    this.containers.add("SPACE");
    this.containers.add("STRCMP");
    this.containers.add("SUBSTRING");
    this.containers.add("SUBSTRING_INDEX");
    this.containers.add("TRANSLATE");
    this.containers.add("TRIM");
    this.containers.add("UCASE");
    this.containers.add("UPPER");
    this.containers.add("ABS");
    this.containers.add("ACOS");
    this.containers.add("ASIN");
    this.containers.add("ATAN");
    this.containers.add("ATAN2");
    this.containers.add("CEIL");
    this.containers.add("CONV");
    this.containers.add("COS");
    this.containers.add("COT");
    this.containers.add("DEGREES");
    this.containers.add("DRANDOM");
    this.containers.add("DRAND");
    this.containers.add("EXP");
    this.containers.add("FLOOR");
    this.containers.add("HEX");
    this.containers.add("LN");
    this.containers.add("LOG2");
    this.containers.add("LOG10");
    this.containers.add("MOD");
    this.containers.add("PI");
    this.containers.add("POW");
    this.containers.add("POWER");
    this.containers.add("RADIANS");
    this.containers.add("RANDOM");
    this.containers.add("RAND");
    this.containers.add("ROUND");
    this.containers.add("SIGN");
    this.containers.add("SIN");
    this.containers.add("SQRT");
    this.containers.add("TAN");
    this.containers.add("TRUNC");
    this.containers.add("TRUNCATE");
    this.containers.add("WIDTH_BUCKET");
    this.containers.add("ADDDATE");
    this.containers.add("DATE_ADD");
    this.containers.add("ADDTIME");
    this.containers.add("ADD_MONTHS");
    this.containers.add("CURDATE");
    this.containers.add("CURRENT_DATE");
    this.containers.add("SYS_DATE");
    this.containers.add("SYSDATE");
    this.containers.add("CURRENT_DATETIME");
    this.containers.add("NOW");
    this.containers.add("SYS_DATETIME");
    this.containers.add("SYSDATETIME");
    this.containers.add("CURTIME");
    this.containers.add("CURRENT_TIME");
    this.containers.add("SYS_TIME");
    this.containers.add("SYSTIME");
    this.containers.add("CURRENT_TIMESTAMP");
    this.containers.add("SYS_TIMESTAMP");
    this.containers.add("SYSTIMESTAMP");
    this.containers.add("LOCALTIME");
    this.containers.add("LOCALTIMESTAMP");
    this.containers.add("DATE");
    this.containers.add("DATEDIFF");
    this.containers.add("DATE_SUB");
    this.containers.add("SUBDATE");
    this.containers.add("DAY");
    this.containers.add("DAYOFMONTH");
    this.containers.add("DAYOFWEEK");
    this.containers.add("DAYOFYEAR");
    this.containers.add("EXTRACT");
    this.containers.add("FROM_DAYS");
    this.containers.add("FROM_UNIXTIME");
    this.containers.add("HOUR");
    this.containers.add("LAST_DAY");
    this.containers.add("MAKEDATE");
    this.containers.add("MAKETIME");
    this.containers.add("MINUTE");
    this.containers.add("MONTH");
    this.containers.add("MONTHS_BETWEEN");
    this.containers.add("QUARTER");
    this.containers.add("SEC_TO_TIME");
    this.containers.add("SECOND");
    this.containers.add("TIME");
    this.containers.add("TIME_TO_SEC");
    this.containers.add("TIMEDIFF");
    this.containers.add("TIMESTAMP");
    this.containers.add("TO_DAYS");
    this.containers.add("UNIX_TIMESTAMP");
    this.containers.add("UTC_DATE");
    this.containers.add("UTC_TIME");
    this.containers.add("WEEK");
    this.containers.add("WEEKDAY");
    this.containers.add("YEAR");
    this.containers.add("BIT_TO_BLOB");
    this.containers.add("BLOB_FROM_FILE");
    this.containers.add("BLOB_LENGTH");
    this.containers.add("BLOB_TO_BIT");
    this.containers.add("CHAR_TO_BLOB");
    this.containers.add("CHAR_TO_CLOB");
    this.containers.add("CLOB_FROM_FILE");
    this.containers.add("CLOB_LENGTH");
    this.containers.add("CLOB_TO_CHAR");
    this.containers.add("CAST");
    this.containers.add("DATE_FORMAT");
    this.containers.add("FORMAT");
    this.containers.add("STR_TO_DATE");
    this.containers.add("TIME_FORMAT");
    this.containers.add("TO_CHAR");
    this.containers.add("TO_DATE");
    this.containers.add("TO_DATETIME");
    this.containers.add("TO_NUMBER");
    this.containers.add("TO_TIME");
    this.containers.add("TO_TIMESTAMP");
    this.containers.add("AVG");
    this.containers.add("COUNT");
    this.containers.add("CUME_DIST");
    this.containers.add("DENSE_RANK");
    this.containers.add("FIRST_VALUE");
    this.containers.add("GROUP_CONCAT");
    this.containers.add("LAG");
    this.containers.add("LAST_VALUE");
    this.containers.add("LEAD");
    this.containers.add("MAX");
    this.containers.add("MEDIAN");
    this.containers.add("MIN");
    this.containers.add("NTH_VALUE");
    this.containers.add("NTILE");
    this.containers.add("PERCENT_RANK");
    this.containers.add("RANK");
    this.containers.add("ROW_NUMBER");
    this.containers.add("STDDEV");
    this.containers.add("STDDEV_POP");
    this.containers.add("STDDEV_SAMP");
    this.containers.add("SUM");
    this.containers.add("VARIANCE");
    this.containers.add("VAR_POP");
    this.containers.add("VAR_SAMP");
    this.containers.add("INCR");
    this.containers.add("DECR");
    this.containers.add("ROWNUM");
    this.containers.add("INST_NUM");
    this.containers.add("GROUPBY_NUM");
    this.containers.add("ORDERBY_NUM");
    this.containers.add("COERCIBILITY");
    this.containers.add("COLLATION");
    this.containers.add("CURRENT_USER");
    this.containers.add("DATABASE");
    this.containers.add("SCHEMA");
    this.containers.add("INDEX_CARDINALITY");
    this.containers.add("INET_ATON");
    this.containers.add("INET_NTOA");
    this.containers.add("LAST_INSERT_ID");
    this.containers.add("LIST_DBS");
    this.containers.add("ROW_COUNT");
    this.containers.add("USER");
    this.containers.add("SYSTEM_USER");
    this.containers.add("VERSION");
    this.containers.add("MD5");
    this.containers.add("COALESCE");
    this.containers.add("DECODE");
    this.containers.add("GREATEST");
    this.containers.add("IF");
    this.containers.add("IFNULL");
    this.containers.add("NVL");
    this.containers.add("ISNULL");
    this.containers.add("LEAST");
    this.containers.add("NULLIF");
    this.containers.add("NVL2");
    this.containers.add("BTREE");
    this.containers.add("HASH");
    this.containers.add("PASSWORD");
    this.containers.add("CONVERT");
  }
  
  public boolean contains(String keyword) {
    if (StringUtils.isBlank(keyword))
      return false; 
    return this.containers.contains(keyword.toUpperCase());
  }
}
